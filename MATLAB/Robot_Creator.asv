clear all;
clc;
%close all;

q = [0 -pi/2 0 pi/2 0 0 0]

% Specify Dh parameters
dhparams = [
    %a(t_x)   alpha(r_x)   d(t_z)    theta(r_z) 
    0.000     -pi/2        -0.0745   0.000;      % shoulder yaw   
    0.000     -pi/2        -0.183    0.000;      % shoulder pitch
    0.000      0.000        0.500   -pi/2;       % fixed prismatic link
    0.000      0.000        1.000    0.000;      % shoulder prismatic joint
    0.100      0.000        0.000    0.000;      % fixed prismatic link offset
    0.000      0.000        0.100    0.000;      % first yaw joint new arm
    0.000      pi/2         0.300    0.000;      % l1
    0.000      0.000        0.100    0.000;      % first pitch joint
    0.000     -pi/2        0.000     0.000;      % l2
    0.000     0.000        0.100     0.000;      % second yaw joint
    0.000     pi/2         0.300     0.000;      % l3
    0.000     0.000        0.100     0.000;      % second pitch joint
    0.000     pi/2         0.300     0.000;      % l4
    ];

% Specify joint types
rev = "revolute";
pris = "prismatic";
fix = "fixed";
jointTypes = [rev, rev,fix ,pris, fix, rev,fix, rev, fix, rev, fix, rev];

% Specify link radius
r = 0.07;

% Define size of the dh table and number of bodies and joints
numJoints = size(dhparams, 1);
bodies = cell(numJoints,1);
joints = cell(numJoints,1);

% Build rigidBodyTree
robot = rigidBodyTree("DataFormat","row");

for i = 1:numJoints
    bodies{i} = rigidBody(['body' num2str(i)]);
    
    % Ensure jointTypes is properly defined
    if length(jointTypes) < numJoints
        error("jointTypes array must have the same length as dhparams.");
    end
    
    % Type of joint to be added
    joints{i} = rigidBodyJoint(['jnt' num2str(i)], jointTypes(i));
    
    setFixedTransform(joints{i}, dhparams(i,:), "dh");
    bodies{i}.Joint = joints{i};
    
    if i == 1 % Add first body to base
        addBody(robot, bodies{i}, "base");
    else % Add current body to previous body by name
        addBody(robot, bodies{i}, bodies{i-1}.Name);
    end
end


%Perform forward kinematics

% Specify home position for joints
jnt2.HomePosition = pi/2


% Display the details of the constructed manipulator for verification
disp('Constructed a rigidBodyTree from DH parameters:');
showdetails(robot);

% Display the manipulator in 3d space
%gui = interactiveRigidBodyTree(robot,"Configuration",q,"MarkerScaleFactor",0.5)
show(robot,q)


% disp("Press any key to close")
% pause('on');
%     pause;
%close All;





%     % Adjust the collision object size dynamically
%     % Use 'a' (link length along x) or 'd' (link length along z) to determine height
%     if dhparams(i,3) ~= 0  % If 'd' parameter (prismatic displacement) is nonzero, use it for height
%         h = abs(dhparams(i,3)); 
%     elseif dhparams(i,1) ~= 0  % Otherwise, use 'a' parameter (revolute link length)
%         h = abs(dhparams(i,1));
%     else
%         h = 0.1; % Default small cylinder if no clear link length is defined
%     end
% 
%     % Create collision object
%     collisionObj = collisionCylinder(r, h);
% 
%     % Transform collision object so it aligns with the link
%     % Shift along x if using 'a', shift along z if using 'd'
%     if dhparams(i,3) ~= 0
%         T = trvec2tform([0, 0, h/2]); % Shift along z
%     elseif dhparams(i,1) ~= 0
%         T = trvec2tform([h/2, 0, 0]); % Shift along x
%     else
%         T = eye(4); % No shift needed
%     end
% 
%     % Add the collision object with transformation
%     addCollision(robot.Bodies{i}, collisionObj, T);
% end